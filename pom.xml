<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.springframework</groupId>
	<artifactId>aaa-initial_springBoot</artifactId>
	<version>0.1.0</version>
	<packaging>war</packaging>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.8.RELEASE</version>
	</parent>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<properties>
		<jdk.version>1.8</jdk.version>
		<!-- <sonar.host.url>http://sonar.devops.apmoller.net:9989/sonar/</sonar.host.url> -->
		<!-- Sonar -->
		<!-- <sonar.language>java</sonar.language> -->
		<!-- <sonar.junit.reportsPath>target/surefire-reports</sonar.junit.reportsPath> -->
		<!-- <sonar.cobertura.reportPath>target/site/cobertura/coverage.xml</sonar.cobertura.reportPath> -->
		<start-class>hello.Application</start-class>

	</properties>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.15</version>
				<configuration>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
					<!-- Skips unit tests if the value of skip.unit.tests property is true -->
					<skipTests>${skip.unit.tests}</skipTests>
					<!-- Excludes integration tests when unit tests are run. -->
					<excludes>
						<!-- <exclude>**/IT*.java</exclude> -->
						<!-- <exclude>**/test/**</exclude> -->
					</excludes>
				</configuration>
			</plugin>
			<!-- <plugin> -->
			<!-- <groupId>org.springframework.boot</groupId> -->
			<!-- <artifactId>spring-boot-maven-plugin</artifactId> -->
			<!-- </plugin> -->
			<!-- <plugin> -->
			<!-- <groupId>org.codehaus.mojo</groupId> -->
			<!-- <artifactId>cobertura-maven-plugin</artifactId> -->
			<!-- <version>2.7</version> -->
			<!-- <configuration> -->
			<!-- <formats> -->
			<!-- <format>html</format> -->
			<!-- <format>xml</format> -->
			<!-- </formats> -->
			<!-- </configuration> -->
			<!-- <executions> -->
			<!-- <execution> -->
			<!-- <phase>test</phase> -->
			<!-- <goals> -->
			<!-- <goal>cobertura</goal> -->
			<!-- </goals> -->
			<!-- </execution> -->
			<!-- </executions> -->
			<!-- </plugin> -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.5.201505241946</version>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<excludes>
								<!-- <exclude>**/IT*.java</exclude> -->
								<exclude>**/hellotests/**</exclude>
							</excludes>
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
							<excludes>
								<!-- <exclude>**/IT*.java</exclude> -->
								<exclude>**/hellotests/**</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<excludes>
						<exclude>**/hellotests/**</exclude>
						<exclude>**/src/test/**</exclude>
					</excludes>
				</configuration>
			</plugin>
<!-- 			<plugin> -->
<!-- 				This is the configuration for the weblogic-maven-plugin -->
<!-- 				<groupId>com.oracle.weblogic</groupId> -->
<!-- 				<artifactId>weblogic-maven-plugin</artifactId> -->
<!-- 				<version>12.2.1-3-0</version> -->
<!-- 				<configuration> -->
<!-- 					<middlewareHome>D:\development\servers\weblogic12_Generic\</middlewareHome> -->
<!-- 				</configuration> -->
<!-- 				<executions> -->
<!-- 					Execute the appc goal during the package phase -->
<!-- 					<execution> -->
<!-- 						<id>wls-deploy</id> -->
<!-- 						<phase>pre-integration-test</phase> -->
<!-- 						<goals> -->
<!-- 							<goal>deploy</goal> -->
<!-- 						</goals> -->
<!-- 						<configuration> -->
<!-- 							<adminurl>t3://127.0.0.1:7001</adminurl> -->
<!-- 							<user>admin</user> -->
<!-- 							<password>admin1234</password> -->
<!-- 							<source>${project.build.directory}/${project.build.finalName}.${project.packaging}</source> -->
<!-- 							<targets>AdminServer</targets> -->
<!-- 							<verbose>true</verbose> -->
<!-- 							<name>${project.build.finalName}</name> -->
<!-- 						</configuration> -->
<!-- 					</execution> -->

<!-- 				</executions> -->
<!-- 			</plugin> -->
		</plugins>
	</build>

</project>
